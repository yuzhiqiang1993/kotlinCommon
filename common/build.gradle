apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

android {
    compileSdkVersion compile_sdk_version
    defaultConfig {
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode version_code
        versionName version_name
        vectorDrawables.useSupportLibrary = true
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            consumerProguardFiles 'proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }

    }


}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    api 'androidx.appcompat:appcompat:1.1.0-alpha01'
    api 'androidx.legacy:legacy-support-v4:1.0.0'
    api 'com.google.android.material:material:1.1.0-alpha02'
    api 'androidx.vectordrawable:vectordrawable:1.1.0-alpha01'
    api 'androidx.constraintlayout:constraintlayout:2.0.0-alpha3'
    api 'androidx.legacy:legacy-support-v4:1.0.0'
    api 'androidx.annotation:annotation:1.0.1'

    /*dagger2*/
    api "com.google.dagger:dagger:$dagger2"
    kapt "com.google.dagger:dagger-compiler:$dagger2"

    /*rx*/
    api "io.reactivex.rxjava2:rxkotlin:$rx_kotlin"
    api "io.reactivex.rxjava2:rxandroid:$rx_android"

    /*AutoDispose*/
    api "com.uber.autodispose:autodispose-kotlin:$autodispose_version"
    api "com.uber.autodispose:autodispose-android-archcomponents-kotlin:$autodispose_version"

    /*eventbus*/
    api "org.greenrobot:eventbus:$eventbus"

    /*permission*/
    api "com.yanzhenjie:permission:$permission"

    /*Gson*/
    api "com.google.code.gson:gson:$gson"

    /*dialog*/
    api "com.afollestad.material-dialogs:core:$material_dialogs"

    /*RxImagepicker*/
    api "com.github.qingmei2:rximagepicker:$rx_imgpicker"

    /*retrofit*/
    api "com.squareup.okhttp3:okhttp:$ok_http"
    api "com.squareup.retrofit2:retrofit:$retrofit"
    api "com.squareup.okhttp3:logging-interceptor:$ok_http"
    api "com.squareup.retrofit2:converter-gson:$retrofit"
    api "com.squareup.retrofit2:adapter-rxjava2:$retrofit"

    /*glide*/
    api "com.github.bumptech.glide:glide:$glide"
    kapt "com.github.bumptech.glide:compiler:$glide"
    api "com.github.chrisbanes:PhotoView:$photoview"
    api "com.blankj:utilcode:$utilcode"

    /*ARouter*/
    api "com.alibaba:arouter-api:$arouter_api"
    kapt "com.alibaba:arouter-compiler:$arouter_compiler"
    /*bottom_navigation_bar*/
    api "com.ashokvarma.android:bottom-navigation-bar:$bottom_navigation_bar"
    /*baseRecyclerViewAdapterHelper*/
    api "com.github.CymChad:BaseRecyclerViewAdapterHelper:$baseRecyclerViewAdapterHelper"
    /*bga_badgeview*/
    api "cn.bingoogolapple:bga-badgeview-api:$bga_badgeview"
    kapt "cn.bingoogolapple:bga-badgeview-compiler:$bga_badgeview"
    /*progressmanager*/
    api "me.jessyan:progressmanager:$progressmanager_version"
    /*Datepicker*/
    implementation 'com.ycuwq.widgets:datepicker:1.2.2'

}


//configurations.all {
//    resolutionStrategy.eachDependency {
//        DependencyResolveDetails details ->
//            def requested = details.requested
//            if (requested.group == 'com.android.support') {
//                if (!requested.name.startsWith("multidex")) {
//                    details.useVersion "$android_support"
//                }
//            }
//    }
//}